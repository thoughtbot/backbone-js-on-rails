Modern web applications are increasingly rich, shifting their complexity onto
the client side.  While there are very well-understood approaches embodied in
mature frameworks to organize server-side code, frameworks for organizing your
client-side code are newer and generally still emerging.  Backbone is one such
library that provides a set of structures to help you organize your JavaScript
code.

Libraries like jQuery have done a great deal to help abstract across browser
inconsistencies and provide a high-level API for making AJAX request and
performing DOM manipulation, but larger rich client-side applications that lack
decoupled and modular organizational structures often fall to the same few kinds
of technical debt.

These apps are often highly asynchronous and the path of least resistance
implementation is often to have deeply nested callbacks to describe asynchronous
concerns, with nested `$.ajax` calls and success/failure conditional concerns
going several layers deep.

Second, rich client-side applications also often involve a layer of state and
logic on the client side.  One tempting way to implement this is to store domain
objects or business logic state in the DOM.  However, relying on the DOM as a
persistence layer - stashing your application's data in hidden `<div>` elements
that you clone and graft and toggle into and out of view, or reading and writing
to lengthy sets of HTML `data-*` attributes - can quickly get cumbersome,
repetitive, and confusing.

A third common feature in rich client-side apps is presenting multiple views on
a single domain object.  Consider a web conferencing application with multiple
views on the memberes of your contact list - each contact is rendered in brief
inside a list view, and in more specificity in a detail view.  Additionally,
your conference call history includes information about the people who
participated.  Each time an individual contact's information changes, this
information needs to cascade to all the view representations.

Often this leads to a tight coupling of persistence and presentation: invoking
`$.ajax` to save a user's update and then updating several specific DOM elements
upon success.

Perhaps you've seen code like this:

[javascript]
source~~~~
TODO: Contact app example, $.ajax nested a few layers deep, updating hidden DOM
elements or a global object e.g. "window.contactsJSON" as persistence, then
cascading update to several views
source~~~~

What if it could look like this instead:

[javascript]
source~~~~
TODO: Backbone refactoring of above example.
source~~~~

By separating business logic, persistence, and presentation concerns, and
providing a decoupled, event-driven way to cascade changes through a system of
observers, each module of code is more well-encapsulated and expresses a
cohesive set of responsibilities without being coupled to outside concerns.
Your application code becomes easier to test, modify, and extend, and your
application can manage itself complexity while its feature set grows.

It's important to note that Backbone is a library, not a framework.  Though the
distinction may seem subtle, it's largely one of intent and purpose.  If you're
coming from a Rails background, you understand that a large part of Rails' value
is expressing and implementing highly-opinionated conventions that guide
development decisions.  Backbone doesn't do this - conventions for rich
client-side applications aren't as well set-down and individual use cases vary
more widely.  Instead of trying to serve as "the one way" etc (TODO: elaborate)
Backbone provides a set of structures that help you organize your application by
building your own framework with its own set of conventions.
