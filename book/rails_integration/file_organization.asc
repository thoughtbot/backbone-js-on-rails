=== Organizing your Backbone.js code in a Rails app

When using Backbone.js in a Rails app, you'll have two kinds of Backbone.js-related assets: classes, and templates.

=== Rails 3.0 and prior

With Rails 3.0 and prior, store your Backbone.js classes in +public/javascripts+:

--------------------------------------
public/
  javascripts/
    jquery.js
    jquery-ui.js
    models/
      user.js
      todo.js
    routers/
      users_router.js
      todos_router.js
    views/
      users/
        users_index.js
        users_new.js
        users_edit.js
      todos/
        todos_index.js
--------------------------------------

If you are using templates, we prefer storing them in +app/templates+ to keep them separated from the server views:

--------------------------------------
app/
  views/
    pages/
      home.html.erb
      terms.html.erb
      privacy.html.erb
      about.html.erb
  templates/
    users/
      index.jst
      new.jst
      edit.jst
    todos/
      index.jst
      show.jst
--------------------------------------

On Rails 3.0 and prior apps, we use Jammit for packaging assets and precompiling templates:

http://documentcloud.github.com/jammit/ +
http://documentcloud.github.com/jammit/#jst

Jammit will make your templates available in a top-level JST object. For example, to access the above todos/index.jst template, you would refer to it as:

[javascript]
source~~~~
JST['todos/index']
source~~~~

Variables can be passed to the templates by passing a Hash to the template, as shown below.

[javascript]
source~~~~
JST['todos/index']({ model: this.model })
source~~~~

==== A note on Jammit and a JST naming gotcha

One issue with Jammit that we've encountered and worked around is that the JST template path can change when adding new templates.

When using Jammit, there is a slightly sticky issue as an app grows from one template subdirectory to multiple template subdirectories.

Let's say you place templates in app/templates. You work for a while on the "Tasks" feature, placing templates under app/templates/tasks. So, window.JST looks something like:

[javascript]
source~~~~
JST['form']
JST['show']
JST['index']
source~~~~

Now, you add another directory under app/templates, say app/templates/user. Now, all JST references are prefixed with their parent directory name so they are unambiguous:

[javascript]
source~~~~
JST['tasks/form']
JST['tasks/show']
JST['tasks/index']
JST['users/new']
JST['users/show']
JST['users/index']
source~~~~

This breaks existing JST references. You can work around this issue by applying the following monkeypatch to Jammit, in config/initializers/jammit.rb

[ruby]
source~~~~
Jammit::Compressor.class_eval do
  private
  def find_base_path(path)
    File.expand_path(Rails.root.join('app','templates'))
  end
end
source~~~~

As applications are moving to Rails 3.1, they're also moving to Sprockets for the asset packager.  Until then, many apps are using Jammit for asset packaging.  One issue with Jammit we've encountered and worked around is that the JST template path can change when adding new templates.  We have an open issue and workaround:

https://github.com/documentcloud/jammit/issues/192

=== Rails 3.1

Rails 3.1 introduces the asset pipeline:

http://edgeguides.rubyonrails.org/asset_pipeline.html

which uses the Sprockets library for preprocessing and packaging assets:

http://getsprockets.org/

To take advantage of the built-in asset pipeline, organize your Backbone.js templates and classes in paths available to the asset pipeline.  Classes go in +app/assets/javascripts/+, and templates go alongside, in +app/assets/templates/+:

--------------------------------------
app/
  assets/
    javascripts/
      jquery.js
      models/
        todo.js
      routers/
        todos_router.js
      views/
        todos/
          todos_index.js
    templates/
      todos/
        index.jst.ejs
        show.jst.ejs
--------------------------------------

Using Sprockets' preprocessors, we can use templates as before.  Here, we're using the EJS template preprocessor to provide the same functionality as Underscore.js' templates.  It compiles the +*.jst+ files and makes them available on the client side via the +window.JST+ object. Identifying the +.ejs+ extension and invoking EJS to compile the templates is managed by Sprockets, and requires the +ejs+ gem to be included in the application Gemfile.

To make the +*.jst+ files available and create the +window.JST+ object, require them in your application.js Sprockets manifest:

--------------------------------------
//  other application requires
//= require_tree ../templates
//= require_tree .
--------------------------------------

To make the +*.jst+ files available and create the +window.JST+ object, require them in your application.js Sprockets manifest:

--------------------------------------
//  other application requires
//= require_tree ../templates
//= require_tree .
--------------------------------------

Underscore.js templates:
http://documentcloud.github.com/underscore/#template

EJS gem:
https://github.com/sstephenson/ruby-ejs

Sprockets support for EJS:
https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/ejs_template.rb
