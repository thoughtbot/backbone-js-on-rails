=== Converting an existing page/view area to use Backbone.js

We'll cover Backbone.js Views and Templates in more detail in the Routers,
Views, and Templates chapter, but this section is meant to get you started
understanding how Backbone.js views work by illustrating the conversion of a
Rails view to a Backbone.js view.

Its important to note that a Rails view is not directly analogous to a
Backbone.js view. A Rails view is more like a Backbone.js template, and
Backbone.js views are more like Rails controllers. This can cause confusion
with developers just started with Backbone.js.

Consider the following Rails view for a tasks index.

[xml]
source~~~~
<h1>Tasks</h1>

<table>
  <tr>
    <th>Title</th>
    <th>Completed</th>
  </tr>

  <% @tasks.each do |task| %>
    <tr>
      <td><%= task.title %></td>
      <td><%= task.completed %></td>
    </tr>
  <% end %>
</table>
source~~~~

Assuming we have the Backbone.js Task model and collection and the Rails Task
model and controller discussed above, and we're priming the pump with
all the tasks, before we can convert the template we must create a Backbone.js
view which will render the Backbone.js template.

A Backbone.js view is a class that is responsible for rendering the display of
a logical element on the page. A view can also bind to events which may cause
it to be re-rendered. For more detailed coverage of Backbone.js views, see the
Routers, Views, and Templates chapter.

The most rudimentary view we could introduce at this point would be one that
merely renders the above page markup, looping over each task in the Tasks
collection. While this would be insufficient for most actual applications, in
order to illustrate the building blocks of a Backbone.js view, such a view
would be like the one shown below.

[javascript]
source~~~~
ExampleApp.Views.TasksIndex = Backbone.View.extend({
  initialize: function() {
  },

  render: function () {
    $(this.el).html(JST['tasks/index']({ tasks: this.collection }));
    return this;
  }
};
source~~~~

The Backbone.js view above has an initialize method which will be called when
the view is instantiated.

The render method above then renders the 'tasks/index' template, passing
the collection of tasks into the template.

Each Backbone.js view has an element which is stored in this.el. This element
can be populated with content, but isn't on the page until placed there by
you.

Finally, the Router must be changed to instantiate this view, passing in the
collection for it to render, render the view, and insert its markup into the
DOM:

[javascript]
source~~~~
ExampleApp.Routers.Tasks = Backbone.Router.extend({
  routes: {
    "": "index"
  },

  index: function() {
    var view = new ExampleApp.Views.TasksIndex({ collection: ExampleApp.tasks });
    $('body').html(view.render().el);
  }
});
source~~~~

Now that we have the Backbone.js view in place that renders the template, and
its being called by the router, we can focus on converting the above Rails
view to a Backbone.js template.

Backbone.js depends on Underscore.js which provides templating. Fortunately,
the delimiter and basic concepts used for both Underscore.js and Erb are the
same, making conversion relatively painless. For this reason, we recommend
using Underscore.js templates when converting a larger, existing Rails
application to Backbone.js.

The tasks index template does two things:

* Loops over all of the tasks
* For each task, it outputs the task title and completed attributes

Underscore.js provides many iteration functions that will be familiar to Rails
developers. For example, each, map, and reject. Fortunately, Backbone.js also
proxies to Underscore.js to provide 26 iteration functions on
Backbone.Collection. This means that its possible to call the Underscore.js
methods directly on Backbone.js collections.

So we'll use the each method to iterate through the Tasks collection that was
passed to the view, as shown in the converted Rails template, which is now an
Underscore.js template, below.

[xml]
source~~~~
<h1>Tasks</h1>

<table>
  <tr>
    <th>Title</th>
    <th>Completed</th>
  </tr>

  <% tasks.each(function(model) { %>
    <tr>
      <td><%= model.escape('title') %></td>
      <td><%= model.escape('completed') %></td>
    </tr>
  <% }); %>
</table>
source~~~~

As you can see above in the above example, the same delimiter, and the use of
the each method make the conversion of the Rails view to an Underscore.js
template straightforward.

Finally, in Rails 3.0 and above template output is escaped. In order to ensure
that we have the same XSS protection as we did in our Rails template, we
access and output the Backbone.js model attributes using the escape method
instead of the normal get method.

==== Breaking out the TaskView

As mentioned above, this simple conversion of the index which merely loops
over each of the tasks is not one you'd likely see in a real Backbone.js
application.

Backbone.js views should represent the logic pieces of your web page. In the
above example, we have an index view, which is a logic piece, but then it is
made up of the display of individual tasks. Each of those individual tasks
should be represented by a new Backbone.js view, named TaskView.

The benefit of this logical separation is covered in more detail in the
Views section, but know that one of the major features of Backbone.js is event
binding. With each of the Task models represented by an individual task view,
when that individual model changes the view can be re-rendered automatically
(by triggering events) and the entire page doesn't need to be re-rendered.

Continuing our task index example from above, a TaskView will be responsible
for rendering just the individual table row for a Task, therefore, its
template will appear as follows.

[xml]
source~~~~
<tr>
  <td><%= model.escape('title') %></td>
  <td><%= model.escape('completed') %></td>
</tr>
source~~~~

And the Task index template will be changed to be as shown below.

[xml]
source~~~~
<h1>Tasks</h1>

<table>
  <tr>
    <th>Title</th>
    <th>Completed</th>
  </tr>

</table>
source~~~~

As you can see above in the index template, the individual tasks are no longer
iterated over and rendered inside the table. This will now happen in the
TasksIndex and TaskView view, which is shown below.

[javascript]
source~~~~
ExampleApp.Views.TaskView = Backbone.View.extend({
  initialize: function() {
  },

  render: function () {
    $(this.el).html(JST['tasks/view']({ model: this.model }));
    return this;
  }
});
source~~~~

The TaskView view above is very similar to the one we saw previously for the
TasksIndex view.  It is only responsible for rendering the contents of its own
element, and the concern of assembling `TaskView`s into a list is left to the
parent view object:

[javascript]
source~~~~
ExampleApp.Views.TasksIndex = Backbone.View.extend({
  initialize: function() {
  },

  render: function () {
    $(this.el).html(JST['tasks/index']({ tasks: this.collection }));

    var self = this;
    this.collection.each(function(task) {
      var taskView = new ExampleApp.Views.TaskView({model: task});
      self.$('table').append(taskView.render().el);
    });

    return this;
  }
});
source~~~~

In the new TasksIndex view above, the Tasks collection is iterated over. For
each task, a new TaskView is instantiated, rendered, and then inserted into
the parent element.

If you take a look at the output of the TasksIndex, it will appear as follows.

[xml]
source~~~~
<div>
  <h1>Tasks</h1>

  <table>
    <tr>
      <th>Title</th>
      <th>Completed</th>
    </tr>

    <div>
      <tr>
        <td>Task 1</td>
        <td>true</td>
      </tr>
    </div>
    <div>
      <tr>
        <td>Task 2</td>
        <td>false</td>
      </tr>
    </div>
  </table>
</div>
source~~~~

Unfortunately, we can see that there is a problem with the above rendered
view, and that is the surrounding div around each of the rendered tasks.

Each of the rendered tasks has a surrounding div because this is the element
that each view has that is accessed via this.el, and what the view's content
is inserted into. By default, this element is a div and therefore every view
will be wrapped in an extra div. While sometimes this extra div doesn't really
matter, as in the outermost div that wraps the entire index, other times this
produced invalid markup.

Fortunately, Backbone.js provides us with a clean and simple mechanism for
changing the element to something other than a div. In the case of the
TaskView, we would like this element to be a tr, then the wrapping tr can be
removed from the task view template.

The element to use is specified by the tagName member of the TaskView, as
shown below.

[javascript]
source~~~~
ExampleApp.Views.TaskView = Backbone.View.extend({
  tagName: "tr",

  initialize: function() {
  },

  render: function () {
    $(this.el).html(JST['tasks/view']({ model: this.model }));
    return this;
  }
};
source~~~~

Given the above tagName customization, the task view template will be as
follows.

[xml]
source~~~~
<td><%= model.escape('title') %></td>
<td><%= model.escape('completed') %></td>
source~~~~

And the resulting output of the TasksIndex will be much cleaner, as shown
below.

[xml]
source~~~~
<div>
  <h1>Tasks</h1>

  <table>
    <tr>
      <th>Title</th>
      <th>Completed</th>
    </tr>

    <tr>
      <td>Task 1</td>
      <td>true</td>
    </tr>
    <tr>
      <td>Task 2</td>
      <td>false</td>
    </tr>
  </table>
</div>
source~~~~

That is the basic building blocks of converting Rails views to Backbone.js and
getting a functional system. The majority of Backbone.js programming you will
do will likely be in the Views and Templates and there is a lot more to them:
event binding, different templating strategies, helpers, event unbinding, and
more. Those topics are covered in the Routers, Views, and Templates chapter.
