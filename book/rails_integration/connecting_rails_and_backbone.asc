=== An Overview of the Stack: Connecting Rails and Backbone.js

By default Backbone.js communicates with your Rails application via JSON gets
and posts. If you've ever made a JSON API for your Rails app, then for the most
part this will be very similar.

If you've never made a JSON API for your Rails application before, lucky
you, it's pretty straightforward.

==== Setting Up Rails Models

One important aspect to keep in mind as you plan out how your Backbone.js
interface will behave, and how it will use your Rails back-end, is that there is
no need to have a one-to-one mapping between your Rails models and your
Backbone.js models.

The smaller an application is, the more likely that there will be a one-to-one
mapping between both Backbone.js and Rails models and controllers.

However, if you have a sufficiently complex application, it's more likely that
you _won't_ have a one-to-one mapping due to the differences in the tools
Backbone.js gives you and the fact that you're building a user-interface, not a
back-end. Some of the reasons why you won't have a one to one mapping include:

* Because you're building a user interface, not a back-end, it's likely that
some of your backbone models will aggregate information from multiple Rails
models into one Backbone.js model.
* This Backbone.js model may or may not be named the same as one of your Rails
models.
* Backbone.js gives you a new type of object not present in Rails:
Collections.
* Backbone.js doesn't have the concept of relationships out of the box.

With that said, lets take the simple case first and look at how you might make a
Backbone.js version of a Rails model.

In our example application, we have a Task model. The simplest Backbone.js
representation of this model would be as shown below.

[javascript]
source~~~~
var Task = Backbone.Model.extend({
  urlRoot: '/tasks'
});
source~~~~

The urlRoot property above indicates to Backbone.js that the server url for
instances of this model will be found at /tasks/:id.

In Rails, it's possible to access individual Tasks, as well as all Tasks (and
query all tasks) through the same Task model. However, in Backbone.js models
only represent the singular representation of a Task. Backbone.js splits out the
plural representation of Tasks into what it calls Collections.

The simplest Backbone.js collection to represent our Tasks would be the
following.

[javascript]
source~~~~
var Tasks = Backbone.Collection.extend({
  model: Task
});
source~~~~

If we specify the url for Tasks in our collection instead, then models within
the collection will use the collection's url to construct their own URLs, and
the urlRoot no longer needs to be specified in the model. If we make that
change, then our collection and models will be as follows.

[javascript]
source~~~~
var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks'
});

var Task = Backbone.Model.extend({});
source~~~~

Notice in the above model definitions that there is no specification of the
attributes on the model. Like ActiveRecord, Backbone.js models get their
attributes from the schema and data given to them. In the case of Backbone.js,
this schema and data are the JSON from the server.

The default JSON representation of an ActiveRecord model is a Hash that includes
all the model's attributes. It does not include the data for any related models
or any methods on the model, but it does include the ids of any related models
as those are stored in a +relation_name_id+ attribute on the model.

The JSON representation of your ActiveRecord models will be retrieved by calling
+to_json+ on them. You customize the output of +to_json+ by overriding the
+as_json+ method in your model.  We'll touch on this more later in the
section "Customizing your Rails-generated JSON."

==== Setting Up Rails Controllers

The Backbone models and collections will talk to your Rails controllers. While
your models may not have a one-to-one mapping with their Rails counterparts, it
is likely that you'll have at least one controller corresponding to every
Backbone.js model.

Fortunately for us, Backbone.js models will communicate in the normal RESTful
way that Rails controllers understand, using the proper verbs to support the
standard RESTful Rails controller actions: index, show, create, update, and
destroy. Backbone.js does not make any use of the new action.

Therefore, it's just up to us to write a _normal_ restful controller.

There are a few different ways you can write your controllers for interacting
with your Backbone.js models and collections. However, the newest and cleanest
way is to use the respond_with method introduced in Rails 3.0.

When using respond_with, in your controller you specify what formats are
supported with the method respond_to. In your individual actions, you then
specify the resource or resources to be delivered using respond_with, as shown
in the example Tasks controller and index action below.

[ruby]
source~~~~
class TasksController < ApplicationController::Base
  respond_to :html, :json

  def index
    respond_with(@tasks = Task.all)
  end
end
source~~~~

In the above example Tasks controller, the respond_to line declares that this
controller should respond to both the HTML and JSON formats. Then, in the
index action, the respond_with call will perform the appropriate action for
the requested format.

The above controller is equivalent to the following one, using the older
respond_to method.

[ruby]
source~~~~
class TasksController < ApplicationController::Base
  def index
    @tasks = Task.all
    respond_to do |format|
      format.html
      format.json { render :json => @tasks }
    end
  end
end
source~~~~

Using respond_with you can create succinct controllers that respond with a
normal web page, but also expose a JSON API that Backbone.js will use.

===== Validations and your HTTP API

If a Backbone.js model has a +validate+ method defined, it will be validated
before its attributes are set. If validation fails, no changes to the model will
occur, and the "error" event will be fired. Your +validate+ method will be passed
the attributes that are about to be updated. You can signal that validation
passed by returning nothing from your +validate+ method. You can signify that
validation has failed by returning something from the method. What you return
can be as simple as a string, or a more complex object that describes the error
in all its gory detail.

In practice, much of the validation logic for your models will continue to be
handled on the server, as fully implementing validations on the client side
would often require duplicating a lot of server-side business logic.

TODO: Is it possible to smoothly integrate Backbone.js and the
client_side_validations gem?

Instead, your Backbone.js applications will likely rely on server-side
validation logic. How to handle a failure scenario is passed in to Backbone.js
model save call as a callback, as shown below.

[javascript]
source~~~~
task.save({title: "New Task title"}, {
  error: function(){
    // handle error from server
  }
});
source~~~~

The error callback will be triggered if your server returns a non-200
response. Therefore, you'll want your controller to return a non-200 HTTP
response code if validations fail.

A controller that does this would be as shown in the following example.

[ruby]
source~~~~
class TasksController < ApplicationController::Base
  respond_to :json

  def create
    @task = Task.new(params[:task])
    if @task.save
      respond_with(@task)
    else
      respond_with(@task, :status => :unprocessable_entity)
    end
  end
end
source~~~~

Your error callback will receive both the model as it was attempted to be
saved and the response from the server. You can take that response and handle
the errors returned by the above controller in whatever way is fit for your
application. For more information about handling and displaying errors, see
the Form helpers section of the Views and Templates chapter.

==== Setting Up Views

Most Backbone.js applications will be a "single-page app". This means that
your Rails application will render a single-page which properly sets up
Backbone.js and the data it will use. From there, ongoing interaction with
your Rails application occurs via the JSON APIs.

The most common page for this single-page application will be the index action
of a controller, as in our example application and the tasks controller.

You will want to create an object in Javascript for your Backbone.js application
to reside. For more information on this namespacing see the "Namespacing your
application" section of the Organization chapter.

This namespace variable holds your Backbone.js application's Models,
Collections, Views, and Routes, and has an init method which will be called to
initialize the application.

This namespace variable will look like the following.

[javascript]
source~~~~
var ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  init: function() {
    new ExampleApp.Routers.Tasks();
    Backbone.history.start();
  }
};
source~~~~

You can find this file in the example app in
+app/assets/javascripts/example_app.js+.

IMPORTANT: You must instantiate a Backbone.js router before calling
Backbone.history.start() otherwise Backbone.history will be undefined.

Then, inside app/views/tasks/index.html.erb you will call the initialize
method. This will appear as follows.

[javascript]
source~~~~
<%= content_for :javascript do -%>
  <%= javascript_tag do %>
    ExampleApp.init();
  <% end %>
<% end -%>
source~~~~

For performance reasons, you will almost always "bootstrap" and give
Backbone.js its initial data within the HTML view for this page. In our
example, the tasks have already been provided to the view in a @tasks instance
variable, and that can be used to bootstrap, as shown below.

[javascript]
source~~~~
<%= content_for :javascript do -%>
  <%= javascript_tag do %>
    ExampleApp.init(<%== @tasks.to_json %>);
  <% end %>
<% end -%>
source~~~~

The above example uses Erb to pass the JSON for the tasks to the init method.

Once you make this change, the ExampleApp.init method then becomes:

[javascript]
source~~~~
var ExampleApp = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  init: function(tasks) {
    new ExampleApp.Routers.Tasks();
    this.tasks = new ExampleApp.Collections.Tasks(tasks);
    Backbone.history.start();
  }
};
source~~~~

Finally, you must have a Router in place which knows what to do. We'll cover
routers in more detail in the Routers, Views and Templates chapter. For a more in-depth
presentation on writing and using routers please go there. However, routers are
an important part of the infrastructure you need to start using Backbone.js
and we can't make our example here work without them.

Backbone.js routers provide methods for routing application flow based on
client-side URL fragments (#fragment).

[javascript]
source~~~~
ExampleApp.Routers.Tasks = Backbone.Router.extend({
  routes: {
    "": "index"
  },

  index: function() {
    // We've reached the end of Rails integration - it's all Backbone from here!

    alert('Hello, world!  This is a Backbone.js router action.');

    // Normally you would continue down the stack, instantiating a
    // Backbone.View class, calling render() on it, and inserting its element
    // into the DOM.
  }
});
source~~~~

A basic router consists of a routes hash which is a mapping between url
fragments and methods on the router. If the current URL fragment, or one that
is being visited matches one of the routes in the hash, its method will be
called.

The example router above is all that is needed to complete our Backbone.js
infrastructure. When a user visits +/tasks+ the index.html.erb view will be
rendered which properly initialized Backbone.js and its dependencies and the
Backbone.js models, collections, routers, and views.
