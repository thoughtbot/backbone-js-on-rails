=== Scopes and filters

To filter a +Backbone.Collection+, like with Rails named scopes, define
functions on your collections that filter by your criteria and return new
instances of the collection class. A first implementation might look like this:

[javascript]
source~~~~
var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    var filteredTasks = this.select(function(task) {
      return task.get('completed_at') !== null;
    });
    return new Tasks(filteredTasks);
  }
});
source~~~~

Ideally, the filter functions will reuse logic already defined in your model
class:

[javascript]
source~~~~
var Task = Backbone.Model.extend({
  isComplete: function() {
    return this.get('completed_at') !== null;
  }
});

var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    var filteredTasks = this.select(function(task) {
      return task.isComplete();
    });
    return new Tasks(filteredTasks);
  }
});
source~~~~

Going further, you can separate the two concerns here, and extract a +filtered+
function:

[javascript]
source~~~~
var Task = Backbone.Model.extend({
  isComplete: function() {
    return this.get('completed_at') !== null;
  }
});

var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  complete: function() {
    return this.filtered(function(task) {
      return task.isComplete();
    });
  },

  filtered: function(criteriaFunction) {
    return new Tasks(this.select(criteriaFunction));
  }
});
source~~~~

=== Sorting

The simplest way to sort a +Backbone.Collection+ is to define a +comparator+
function:

[javascript]
source~~~~
var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  }
});
source~~~~

If you'd like to provide more than one sort order on your collection, you can
use an approach similar to the +filtered+ function above, and return a new
+Backbone.Collection+ whose +comparator+ is overridden.  Call +sort+ to update
the ordering on the new collection:

[javascript]
source~~~~
var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  },

  byCreatedAt: function() {
    var sortedCollection = new Tasks(this.models);
    sortedCollection.comparator = function(task) {
      return task.createdAt;
    };
    sortedCollection.sort();
    return sortedCollection;
  }
});
source~~~~

Similarly, you can extract the resuable concern to another function:

[javascript]
source~~~~
var Tasks = Backbone.Collection.extend({
  model: Task,
  url: '/tasks',

  comparator: function(task) {
    return task.dueDate;
  },

  byCreatedAt: function() {
    return this.sortedBy(function(task) {
      return task.createdAt;
    });
  },

  byCompletedAt: function() {
    return this.sortedBy(function(task) {
      return task.completedAt;
    });
  },

  sortedBy: function(comparator) {
    var sortedCollection = new Tasks(this.models);
    sortedCollection.comparator = comparator;
    sortedCollection.sort();
    return sortedCollection;
  }
});
source~~~~
