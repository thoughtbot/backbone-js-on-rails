Searching 47 files for "``` " (regex)

/Users/harlow/Sites/books/backbone-js-on-rails/book/models_and_collections/client_server_duplication.md:
   16  `Member` model provides a validation:
   17
   18: ``` ruby
   19  class Member < ActiveRecord::Base
   20    validate :email, :presence => true
   ..
   25  `error` event to handle the server-side error:
   26
   27: ``` javascript
   28  var MemberFormView = Backbone.View.extend({
   29    events: {
   ..
   71  write:
   72
   73: ``` javascript
   74  var Member = Backbone.Model.extend({
   75    validate: function() {
   ..
   88  client-side or server-side errors:
   89
   90: ``` javascript
   91  var ErrorList = function(responseOrErrors) {
   92    if (responseOrErrors && responseOrErrors.responseText) {

/Users/harlow/Sites/books/backbone-js-on-rails/book/models_and_collections/filters_and_sorting.md:
   11  function and call `#sort`:
   12
   13: ``` javascript
   14  var alphabet = new Backbone.Collection([
   15    new Backbone.Model({ letter: 'W', syllables: 3 }),
   ..
   31  want to remove:
   32
   33: ``` javascript
   34  // get rid of letters that take too long to say
   35  shortLetters = alphabet.filter(function(letter) {
   ..
   61  first implementation might look like this:
   62
   63: ``` javascript
   64  var Tasks = Backbone.Collection.extend({
   65    model: Task,
   ..
   78  already defined in your model class:
   79
   80: ``` javascript
   81  var Task = Backbone.Model.extend({
   82    isComplete: function() {
   ..
  104  Let's separate the two concerns here, and extract a `filtered` function:
  105
  106: ``` javascript
  107  var Task = Backbone.Model.extend({
  108    isComplete: function() {
  ...
  130  collection class using `this.constructor`:
  131
  132: ``` javascript
  133  var FilterableCollectionMixin = {
  134    filtered: function(criteriaFunction) {
  ...
  166  collection:
  167
  168: ``` javascript
  169  var FilterableCollectionMixin = {
  170    filtered: function(criteriaFunction) {
  ...
  207  collection, which it renders from.
  208
  209: ``` javascript
  210  var FilterableResultsView = Support.CompositeView.extend({
  211    events: {
  ...
  256
  257
  258: ``` javascript
  259  var FilterableResultsView = Support.CompositeView.extend({
  260    initialize: function(options) {
  ...
  288  function.  This functionality is built in:
  289
  290: ``` javascript
  291  var Tasks = Backbone.Collection.extend({
  292    model: Task,
  ...
  304  the ordering on the new collection:
  305
  306: ``` javascript
  307  var Tasks = Backbone.Collection.extend({
  308    model: Task,
  ...
  326  Similarly, you can extract the reusable concern to another function:
  327
  328: ``` javascript
  329  var Tasks = Backbone.Collection.extend({
  330    model: Task,
  ...
  358  ...And then into another reusable mixin:
  359
  360: ``` javascript
  361  var SortableCollectionMixin = {
  362    sortedBy: function(comparator) {
  ...
  396  from one collection to another:
  397
  398: ``` javascript
  399  var SortableCollectionMixin = {
  400    sortedBy: function(comparator) {

/Users/harlow/Sites/books/backbone-js-on-rails/book/models_and_collections/model_relationships.md:
   99  nested collection:
  100
  101: ``` bash
  102  $ curl http://localhost:3000/tasks/78/attachments.json | ppjson
  103  [
  ...
  121  `/tasks/:id` endpoint:
  122
  123: ``` bash
  124  $ curl http://tasksapp.local:3000/tasks/78.json | ppjson
  125  {
  ...
  144  following Rails routes:
  145
  146: ``` ruby
  147  resources :tasks, :only => [:show, :create] do
  148    resources :attachments, :only => [:create]
  ...
  175  For example, a `tasks#show` action may look like this:
  176
  177: ``` ruby
  178  class TasksController < ApplicationController
  179    respond_to :json
  ...
  191  one in `app/views/tasks/show.json.rabl`, so it will render that instead:
  192
  193: ``` ruby
  194  object @task
  195  attributes(:id, :title, :complete)
  ...
  211  placing that as an object property:
  212
  213: ``` javascript
  214  taskBeforeParsing.get('attachments')
  215  // => [ { id: 1, upload_url: '...' }, { id: 2, upload_url: '...' } ]
  ...
  244  `task.attachments`:
  245
  246: ``` javascript
  247  ExampleApp.Models.Task = Backbone.Model.extend({
  248    initialize: function() {
  ...
  280  the model:
  281
  282: ``` javascript
  283  ExampleApp.Routers.Tasks = Support.SwappingRouter.extend({
  284    // ...

/Users/harlow/Sites/books/backbone-js-on-rails/book/models_and_collections/nested_models.md:
   64  the join model `Assignment`.
   65
   66: ``` ruby
   67  class Job < ActiveRecord::Base
   68    has_many :assignments
   ..
   94  `accepts_nested_attributes_for`:
   95
   96: ``` ruby
   97  class Job < ActiveRecord::Base
   98    has_many :assignments
   ..
  110  like this:
  111
  112: ``` javascript
  113  /* POST /api/v1/jobs */
  114  {
  ...
  129  needs to know.
  130
  131: ``` javascript
  132  MyApp = {};
  133  MyApp.Models = {};
  ...
  162  Now, you can add workers directly to the job:
  163
  164: ``` javascript
  165  var worker3 = new MyApp.Models.Worker({ id: 3 });
  166  var worker5 = new MyApp.Models.Worker({ id: 5 });

/Users/harlow/Sites/books/backbone-js-on-rails/book/models_and_collections/sync_and_push.md:
  102  start Faye:
  103
  104: ``` bash
  105  $ cat faye/Gemfile
  106
  ...
  146  case, we name it `TodoObserver`:
  147
  148: ``` ruby
  149  class TodoObserver < ActiveRecord::Observer
  150    include BackboneSync::Rails::Faye::Observer
  ...
  158  Let's say that a `Todo` was just created:
  159
  160: ``` ruby
  161  >> Todo.create(title: "Buy some tasty kale juice")
  162  => #<Todo id: 17, title: "Buy some tasty kale juice", created_at: "2011-09-06 20:49:03", updated_at: "2011-09-07 15:01:09">
  ...
  165  The message looks like this:
  166
  167: ``` javascript
  168  {
  169    "channel": "/sync/todos",
  ...
  192  Faye runs an HTTP server, and serves up its own client library, so that's easy to pull in:
  193
  194: ``` html
  195  <script type="text/javascript" src="http://localhost:9292/faye.js"></script>
  196  ```
  ...
  198  To subscribe to Faye channels, instantiate a `Faye.Client` and call `subscribe` on it:
  199
  200: ``` javascript
  201  var client = new Faye.Client('http://localhost:9292/faye');
  202  client.subscribe('/some/channel', function(message) {
  ...
  208  collection.  Let's wrap up those two concerns into a `FayeSubscriber`:
  209
  210: ``` javascript
  211  this.BackboneSync = this.BackboneSync || {};
  212
  ...
  261  corresponding `FayeSubscriber`.  Say, in your application bootstrap code:
  262
  263: ``` javascript
  264  MyApp.Routers.TodosRouter = Backbone.Router.extend({
  265    initialize: function(options) {
  ...
  311  just that:
  312
  313: ``` ruby
  314  begin
  315    Timeout.timeout(1) do
  ...
  326  and let's describe the desired functionality:
  327
  328: ``` cucumber
  329    @javascript
  330    Scenario: Viewing a task edited by another user
  ...
  362  "Alice"` step looks like this:
  363
  364: ``` ruby
  365  When /^I (?:am using|switch to) session "([^"]+)"$/ do |new_session_name|
  366    Capybara.session_name = new_session_name

/Users/harlow/Sites/books/backbone-js-on-rails/book/models_and_collections/uploading_attachments.md:
   90  a spec for uploading that asserts the correct upload request is issued:
   91
   92: ``` javascript
   93  it("uploads the file when the upload method is called", function() {
   94    view.upload();
   ..
  105  and implement using the `uploader.js` library:
  106
  107: ``` javascript
  108  render: function () {
  109    // ...
  ...
  133  We write a spec:
  134
  135: ``` javascript
  136  it("sets the CSRF token for the upload request", function() {
  137    view.upload();
  ...
  143  And add the CSRF token implementation at the end of `attachUploader`:
  144
  145: ``` javascript
  146  attachUploader: function() {
  147    // ...
  ...
  174  like the following:
  175
  176: ``` rhtml
  177  <% this.task.attachments.each(function(attachment) { %>
  178    Attached: <img src="<%= attachment.get('upload_url')" /> %>
  ...
  192  like we did with `ActiveRecord::Base.include_root_in_json`:
  193
  194: ``` ruby
  195  # config/initializers/rabl_init.rb
  196  Rabl.configure do |config|
  ...
  216  attachments:
  217
  218: ``` javascript
  219  ExampleApp.Models.Task = Backbone.Model.extend({
  220    initialize: function() {

/Users/harlow/Sites/books/backbone-js-on-rails/book/models_and_collections/validations.md:
   17  attribute on the ActiveRecord model, like so:
   18
   19: ``` ruby
   20  class Task < ActiveRecord::Base
   21    validates :title, presence: true
   ..
   26  `YourApp.Models.Task`:
   27
   28: ``` javascript
   29  YourApp.Models.Task = Backbone.Model.extend({
   30    urlRoot: '/tasks'
   ..
   35  list:
   36
   37: ``` html
   38  <form>
   39    <ul>
   ..
   52  function that we'll call `createTask`:
   53
   54: ``` javascript
   55  YourApp.Views.NewTask = Backbone.View.extend({
   56    events: {
   ..
   86  We'll call this the `FormAttributes`, and its code is as follows:
   87
   88: ``` javascript
   89  FormAttributes = function(form) {
   90    this.form = form;
   ..
  107  With this class in place, we can rewrite our form submit action to:
  108
  109: ``` javascript
  110  YourApp.Views.NewTask = Backbone.View.extend({
  111    events: {
  ...
  134  available in Rails 3 applications:
  135
  136: ``` ruby
  137  class TasksController < ApplicationController
  138    respond_to :json
  ...
  148  action is defined in your routes:
  149
  150: ``` ruby
  151  resources :tasks, only: [:create, :show]
  152  ```
  ...
  159  The response from Rails in that case looks something like this:
  160
  161: ``` javascript
  162  { "title": ["can't be blank"] }
  163  ```
  ...
  185  through errors:
  186
  187: ``` javascript
  188  ErrorList = function (response) {
  189    if (response && response.responseText) {
  ...
  207  their input is invalid:
  208
  209: ``` javascript
  210  ErrorView = Backbone.View.extend({
  211    initialize: function() {
  ...
  247  Putting it all together, our save call's callbacks now look like this:
  248
  249: ``` javascript
  250  var self = this;
  251  var model = new YourApp.Models.Task(attributes);

/Users/harlow/Sites/books/backbone-js-on-rails/book/organization/mixins.md:
   12  events in a fashion that can be cleaned up later:
   13
   14: ``` javascript
   15  var Observer = {
   16    bindTo: function(source, event, callback) {
   ..
   32  prototype of that class:
   33
   34: ``` javascript
   35  SomeCollectionView = Backbone.View.extend({
   36    initialize: function() {

/Users/harlow/Sites/books/backbone-js-on-rails/book/organization/namespacing.md:
   15  will look like the following:
   16
   17: ``` javascript
   18  var ExampleApp = {
   19    Models: {},

/Users/harlow/Sites/books/backbone-js-on-rails/book/performance/dependencies.md:
    8  jQuery-compatible syntax."  From `backbone.js`:
    9
   10: ``` javascript
   11  (function(){
   12

/Users/harlow/Sites/books/backbone-js-on-rails/book/rails_integration/connecting_rails_and_backbone.md:
   16  shown below:
   17
   18: ``` javascript
   19  var Task = Backbone.Model.extend({
   20    urlRoot: '/tasks'
   ..
   41  following.
   42
   43: ``` javascript
   44  var Tasks = Backbone.Collection.extend({
   45    model: Task
   ..
   52  change, then our collection and model will be as follows.
   53
   54: ``` javascript
   55  var Tasks = Backbone.Collection.extend({
   56    model: Task,
   ..
   97  using `respond_with`:
   98
   99: ``` ruby
  100  class TasksController < ApplicationController
  101    respond_to :html, :json
  ...
  132  are handled by error callbacks in Backbone:
  133
  134: ``` javascript
  135  task.save({ title: "New Task title" }, {
  136    error: function() {
  ...
  146  A controller that does this would appear as shown in the following example:
  147
  148: ``` ruby
  149  class TasksController < ApplicationController
  150    respond_to :json
  ...
  165  refactored:
  166
  167: ``` ruby
  168  class TasksController < ApplicationController
  169    respond_to :json
  ...
  208  This application object will look like the following:
  209
  210: ``` javascript
  211  var ExampleApp = {
  212    Models: {},
  ...
  233  in an `@tasks` instance variable:
  234
  235: ``` javascript
  236  <%= content_for :javascript do -%>
  237    <%= javascript_tag do %>
  ...
  249  routers in more detail in the "Routers, Views and Templates" chapter.
  250
  251: ``` javascript
  252  ExampleApp.Routers.Tasks = Backbone.Router.extend({
  253    routes: {

/Users/harlow/Sites/books/backbone-js-on-rails/book/rails_integration/converting_views.md:
   10  Consider the following Rails view for a tasks index:
   11
   12: ``` rhtml
   13  <h1>Tasks</h1>
   14
   ..
   40  above, rendering a collection of tasks:
   41
   42: ``` javascript
   43  ExampleApp.Views.TasksIndex = Backbone.View.extend({
   44    render: function () {
   ..
   60  into the DOM:
   61
   62: ``` javascript
   63  ExampleApp.Routers.Tasks = Backbone.Router.extend({
   64    routes: {
   ..
   94  passed to the view, as shown in the converted Underscore.js template below:
   95
   96: ``` rhtml
   97  <h1>Tasks</h1>
   98
   ..
  133  rendering just the individual table row for a `Task`:
  134
  135: ``` rhtml
  136  <tr>
  137    <td><%= model.escape('title') %></td>
  ...
  142  And the Task index template will be changed to appear as shown below:
  143
  144: ``` rhtml
  145  <h1>Tasks</h1>
  146
  ...
  160  `TasksIndex` and `TaskView` views, respectively:
  161
  162: ``` javascript
  163  ExampleApp.Views.TaskView = Backbone.View.extend({
  164    render: function () {
  ...
  174  parent view object:
  175
  176: ``` javascript
  177  ExampleApp.Views.TasksIndex = Backbone.View.extend({
  178    render: function () {
  ...
  198  If you look at the output of the `TasksIndex`, it will appear as follows:
  199
  200: ``` rhtml
  201  <div>
  202    <h1>Tasks</h1>
  ...
  242  shown below:
  243
  244: ``` javascript
  245  ExampleApp.Views.TaskView = Backbone.View.extend({
  246    tagName: "tr",
  ...
  259  follows:
  260
  261: ``` rhtml
  262  <td><%= model.escape('title') %></td>
  263  <td><%= model.escape('completed') %></td>
  ...
  267  below:
  268
  269: ``` html
  270  <div>
  271    <h1>Tasks</h1>

/Users/harlow/Sites/books/backbone-js-on-rails/book/rails_integration/customizing_rails_json.md:
   17  JSON with the `:only` option:
   18
   19: ``` ruby
   20  def as_json(options = {})
   21    super(options.merge(:only => [ :id, :title ]))
   ..
   29  you accomplish this with the `:except` option:
   30
   31: ``` ruby
   32  def as_json(options = {})
   33    super(options.merge(:except => [ :encrypted_password ]))
   ..
   39  with the `:methods` option, as shown in the following example:
   40
   41: ``` ruby
   42  def as_json(options = {})
   43    super(options.merge(:methods => [ :calculated_value ]))
   ..
   49  comments in the JSON for a Task with the `:include` option:
   50
   51: ``` ruby
   52  def as_json(options = {})
   53    super(options.merge(:include => [ :comments ]))
   ..
   70  ActiveRecord setting `ActiveRecord::Base.include_root_in_json`.
   71
   72: ``` ruby
   73    > ActiveRecord::Base.include_root_in_json = false
   74    > Task.last.as_json
   ..
   94  `Backbone.Model.prototype.parse`, and `Backbone.Model.prototype.toJSON`:
   95
   96: ``` javascript
   97  _.extend(Backbone.Collection.prototype, Backbone.Events, {
   98    // http://documentcloud.github.com/backbone/#Collection-parse
   ..
  128  `modelName` function on your model to provide this:
  129
  130: ``` javascript
  131  Backbone.Model.prototype.toJSON = function() {
  132    var hashWithRoot = {};

/Users/harlow/Sites/books/backbone-js-on-rails/book/rails_integration/file_organization.md:
   64  as:
   65
   66: ``` javascript
   67  JST['todos/index']
   68  ```
   ..
   71  shown below.
   72
   73: ``` javascript
   74  JST['todos/index']({ model: this.model })
   75  ```
   ..
   83  like:
   84
   85: ``` javascript
   86  JST['form']
   87  JST['show']
   ..
   93   parent directory name so they are unambiguous:
   94
   95: ``` javascript
   96  JST['form'] // in tasks/form.jst
   97  JST['tasks/show']
   ..
  105  the following monkeypatch to Jammit, in `config/initializers/jammit.rb`:
  106
  107: ``` ruby
  108  Jammit::Compressor.class_eval do
  109    private
  ...
  173  them in your application.js Sprockets manifest:
  174
  175: ``` javascript
  176  //  other application requires
  177  //= require_tree ../templates

/Users/harlow/Sites/books/backbone-js-on-rails/book/rails_integration/rails_url_helpers.md:
   15  We will add this link as a fourth column in the template:
   16
   17: ``` rhtml
   18  <!-- app/assets/templates/tasks/item.jst.ejs -->
   19  <td><label>Task title</label><a class="task-link" href="#">details</a></td>
   ..
   27  and populate it from the view:
   28
   29: ``` javascript
   30  // app/assets/javascripts/views/task_item.js
   31
   ..
   63  these helpers:
   64
   65: ``` javascript
   66  // app/assets/javascripts/views/task_item.js
   67  renderFormContents: function() {
   ..
   79  templates as well:
   80
   81: ``` rhtml
   82  <!-- app/assets/templates/tasks/item.jst.ejs -->
   83  <td><label>Task title</label><a class="task-link" href="#">details</a></td>
   ..
   87    <a href="<%= Routes.task_history_path(this.task) %>">Task History</a>
   88  </td>
   89: ``` rhtml
   90
   91  If you are using a templating library like
   ..
   94  directly to eliminate the need to prefix the calls with `Routes.`:
   95
   96: ``` javascript
   97  // somewhere at initialization time, assuming you are using Handlebars.js:
   98  _.each(Routes, function(helper, name) {

/Users/harlow/Sites/books/backbone-js-on-rails/book/security/html_encoding_bootstrap_data.md:
   17  Here's an example:
   18
   19: ``` javascript
   20  <script type="text/json" id="bootstrap">
   21    { "tasks": <%= @tasks.to_json %> }
   ..
   50  DOM, make sure you escape the HTML at that point:
   51
   52: ``` javascript
   53  // From app/assets/javascripts/views/task_item.js:
   54

/Users/harlow/Sites/books/backbone-js-on-rails/book/testing/example.md:
   25  If you haven't already, bootstrap your application for Cucumber and Capybara:
   26
   27: ``` bash
   28  rails generate cucumber:install
   29  ```
   ..
   31  Next, bootstrap the application for Jasmine:
   32
   33: ``` bash
   34  rails generate jasmine:install
   35  ```
   ..
   44  including Jasmine specs:
   45
   46: ``` ruby
   47  # Rakefile
   48  # ...
   ..
   66  Running this, we see a failure:
   67
   68: ``` text
   69  Then I should see "Master Backbone" within the tasks list
   70    Unable to find css "#tasks table" (Capybara::ElementNotFound)
   ..
   95  write this class, we'll motivate it with a Jasmine isolation spec:
   96
   97: ``` javascript
   98  describe("ExampleApp.Views.TasksIndex", function() {
   99    it("renders a task table", function() {
  ...
  115  view render it:
  116
  117: ``` ruby
  118  ExampleApp.Views.TasksIndex = Backbone.View.extend({
  119    tagName: 'div',
  ...
  132  The `app/assets/templates/tasks/index.jst.ejs` template:
  133
  134: ``` html
  135  <table></table>
  136  ```
  ...
  144  table"` element is present on the page, but doesn't contain the content we want:
  145
  146: ``` text
  147  @javascript
  148  Scenario: View tasks
  ...
  169  This spec fails:
  170
  171: ``` text
  172  1 spec, 1 failure in 0.008s
  173  Finished at Thu Sep 22 2011 18:10:26 GMT-0400 (EDT)
  ...
  196  accepting a collection of tasks, and now we have to render it:
  197
  198: ``` text
  199  Expected '<div id="tasks"><table> <tbody><tr> <th>Title</th> \\
  200  <th>Completed</th> </tr> </tbody><div></div><div></div></table> </div>' to \\
  ...
  211  Now, Jasmine passes, but the Cucumber story is still failing:
  212
  213: ``` text
  214  Then I should see "Master Backbone" within the tasks list
  215  Unable to find css "#tasks table" (Capybara::ElementNotFound)
  ...
  239  And the integration test passes!
  240
  241: ``` text
  242  Feature: Viewing Tasks
  243    As a user

/Users/harlow/Sites/books/backbone-js-on-rails/book/testing/integration.md:
   35  perspective.  Consider this example, which uses RSpec:
   36
   37: ``` ruby
   38  describe "the login process", :type => :request do
   39    it "accepts an email and password" do
   ..
   74  interaction:
   75
   76: ``` cucumber
   77  Given there is a user account "alice@example.com" with the password "password"
   78  When I go to the home page
   ..
   85  this case, they are defined to run Capybara methods:
   86
   87: ``` ruby
   88  Given /^there is a user account "(.*)" with the password "(.*)"$/ do \\
   89  |email, password|
   ..
  128  Capybara makes it easy to switch between drivers. Just set your default driver to capybara-webkit:
  129
  130: ``` ruby
  131  Capybara.javascript_driver = :webkit
  132  ```

/Users/harlow/Sites/books/backbone-js-on-rails/book/testing/unit.md:
   53  specs:
   54
   55: ``` javascript
   56  describe("ExampleApp.Models.Tasks", function() {
   57    it("knows if it is complete", function() {

/Users/harlow/Sites/books/backbone-js-on-rails/book/views_and_templates/cleaning_up.md:
   76  done:
   77
   78: ``` javascript
   79  var SomeCollectionView = Backbone.View.extend({
   80    // snip...
   ..
  105  single call to `unbindFromAll()` to unbind them:
  106
  107: ``` javascript
  108  var SomeCollectionView = Backbone.View.extend({
  109    initialize: function() {
  ...
  174  This is handled by invoking `Backbone.Events.off()`:
  175
  176: ``` javascript
  177  var FilteringView = Backbone.View.extend({
  178    // snip...

/Users/harlow/Sites/books/backbone-js-on-rails/book/views_and_templates/composite_views.md:
   24  break up the template files:
   25
   26: ``` rhtml
   27  <!-- tasks/show.jst -->
   28  <section class="task-details">
   ..
   35  ```
   36
   37: ``` rhtml
   38  <!-- tasks/details.jst -->
   39  <input type="checkbox"<%= task.isComplete() ? ' checked="checked"' : '' %> />
   ..
   41  ```
   42
   43: ``` rhtml
   44  <!-- comments/list.jst -->
   45  <ul>
   ..
   52  ```
   53
   54: ``` rhtml
   55  <!-- comments/item.jst -->
   56  <h4><%= comment.user.escape('name') %></h4>
   ..
   58  ```
   59
   60: ``` rhtml
   61  <!-- comments/new.jst -->
   62  <div class="form-inputs">
   ..
   89  Making use of `CompositeView`, we split up the `TaskDetail` view class:
   90
   91: ``` javascript
   92  var TaskDetail = Support.CompositeView.extend({
   93    tagName: 'section',
   ..
  122  ```
  123
  124: ``` javascript
  125  var CommentsList = Support.CompositeView.extend({
  126    tagName: 'ul',
  ...
  158  ```
  159
  160: ``` javascript
  161  var CommentForm = Support.CompositeView.extend({
  162    events: {
  ...
  184  contains placeholder elements that are used to wrap child views:
  185
  186: ``` rhtml
  187  <!-- tasks/show.jst -->
  188  <section class="task-details">
  ...
  193  ```
  194
  195: ``` rhtml
  196  <!-- tasks/details.jst -->
  197  <input type="checkbox"<%= task.isComplete() ? ' checked="checked"' : '' %> />
  ...
  199  ```
  200
  201: ``` rhtml
  202  <!-- comments/list.jst -->
  203  <ul class="comments-list">
  ...
  208  ```
  209
  210: ``` rhtml
  211  <!-- comments/item.jst -->
  212  <h4><%= comment.user.escape('name') %></h4>
  ...
  214  ```
  215
  216: ``` rhtml
  217  <!-- comments/new.jst -->
  218  <label for="new-comment-input">Add comment</label>

/Users/harlow/Sites/books/backbone-js-on-rails/book/views_and_templates/event_binding.md:
   16  are bound to that event:
   17
   18: ``` javascript
   19  var gameEngine = {};
   20  _.extend(gameEngine, Backbone.Events);
   ..
   63  DOM elements. You can attach event listeners by hand if you like:
   64
   65: ``` rhtml
   66  <!-- templates/soundboard.jst -->
   67  <a class="sound">Honk</a>
   ..
   69  ```
   70
   71: ``` javascript
   72  var SoundBoard = Backbone.View.extend({
   73    render: function() {
   ..
   84  But Backbone provides an easier and more declarative approach with the `events` hash:
   85
   86: ``` javascript
   87  var SoundBoard = Backbone.View.extend({
   88    events: {
   ..
  142  filters the users to a particular gender:
  143
  144: ``` javascript
  145  GenderPicker = Backbone.View.extend({
  146    render: {

/Users/harlow/Sites/books/backbone-js-on-rails/book/views_and_templates/explanation.md:
   14  A basic Backbone view appears as follows.
   15
   16: ``` javascript
   17  ExampleApp.Views.ExampleView = Backbone.View.extend({
   18    tagName: "li",
   ..
   76  You can also set this after the fact with the `setElement()` function:
   77
   78: ``` javascript
   79  var view = new ExampleView();
   80  view.setElement(existingElement);
   ..
  120  For example:
  121
  122: ``` javascript
  123  render: function() {
  124    this.$el.html(this.childView.render().el);

/Users/harlow/Sites/books/backbone-js-on-rails/book/views_and_templates/forms.md:
   25  form markup that looks like this:
   26
   27: ``` html
   28  <form>
   29    <li>
   ..
   58  approach this manually:
   59
   60: ``` javascript
   61  var serialize = function(form) {
   62    var elements = $('input, select, textarea', form);
   ..
  110  entered for the title:
  111
  112: ``` ruby
  113    validates :title, :presence => true
  114  ```
  ...
  117  delivers a response:
  118
  119: ``` ruby
  120  def create
  121    respond_with(current_user.tasks.create(params[:task]))
  ...
  131  For an example, let's examine a form field modeled after Formtastic conventions:
  132
  133: ``` html
  134  <form id="example_form">
  135    <ol>
  ...
  152  response and render an `ErrorView`.
  153
  154: ``` javascript
  155  var formField = $('form#example_form');
  156
  ...
  172  container:
  173
  174: ``` javascript
  175  ErrorView = Backbone.View.extend({
  176    initialize: function(options) {

/Users/harlow/Sites/books/backbone-js-on-rails/book/views_and_templates/internationalization.md:
   18  locale:
   19
   20: ``` html
   21  <script type="text/javascript">
   22    I18n.defaultLocale = "<%= I18n.default_locale %>";
   ..
   27  ...and then use the `I18n` JavaScript object to provide translations:
   28
   29: ``` javascript
   30  // translate with your default locale
   31  I18n.t("some.scoped.translation");
   ..
   37  You can use the `I18n.t()` function inside your templates, too:
   38
   39: ``` rhtml
   40  <nav>
   41    <a href="#/"><%= I18n.t("nav.links.home") %></a>

/Users/harlow/Sites/books/backbone-js-on-rails/book/views_and_templates/routers.md:
   30  A typical Backbone router will appear as shown below:
   31
   32: ``` javascript
   33  ExampleApp.Routers.ExampleRouter = Backbone.Router.extend({
   34    routes: {

/Users/harlow/Sites/books/backbone-js-on-rails/book/views_and_templates/swapping_routers.md:
    4  Earlier, we discussed a convention of writing a `view.leave()`. Let's augment our view to include the ability to clean itself up by "leaving" the DOM:
    5
    6: ``` javascript
    7  var MyView = Backbone.View.extend({
    8    // ...
    .
   67  use. Let's take a quick look at this function, as seen in Backbone 0.5.3:
   68
   69: ``` javascript
   70  var extend = function (protoProps, classProps) {
   71    var child = inherits(this, protoProps, classProps);

/Users/harlow/Sites/books/backbone-js-on-rails/book/views_and_templates/templating_strategy.md:
   10  template that renders the following HTML:
   11
   12: ``` html
   13  <ul class="tasks">
   14    <li><span class="title">Buy milk</span> Get the good kind </li>
   ..
   24  An Underscore.js template may look like this:
   25
   26: ``` rhtml
   27  <ul class="tasks">
   28    <% tasks.each(function(task) { %>
   ..
   64  The above template would look like this in Handlebars:
   65
   66: ``` rhtml
   67  <ul class="title">
   68    {{#each tasks}}
   ..
  139  mockups directly in as templates, without modifying them.
  140
  141: ``` html
  142  <!-- snip -->
  143  <div id="song-player">
  ...
  156  ```
  157
  158: ``` javascript
  159  MyView = Backbone.View.extend({
  160    render: function() {

167 matches across 28 files
